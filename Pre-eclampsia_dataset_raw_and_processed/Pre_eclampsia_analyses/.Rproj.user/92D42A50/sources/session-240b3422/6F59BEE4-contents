# Importing data

```{r}
pacman::p_load(conflicted,tidyverse, wrappedtools, 
               readxl, readODS, foreign, haven)
```

## Import from text files (.txt, .csv)

## Import from Excel

### Tidy Excel files

```{r}
rawdata <- read_excel(path = "./data/Medtest_e.xlsx")
head(rawdata)
# This can also be done in one single big pipe, without printing out the tibble after every renaming step

rawdata <- 
  rename_with(.data=rawdata, 
              .fn = ~str_replace_all(.x,pattern=" ",replacement="_"))
str(rawdata)

# WHY DO WE DO THIS? Why necessary to turn all column names to title?
rawdata <- 
  rename_with(.data=rawdata,
              .fn=str_to_title,
              .cols = !contains(c("BP","BMI","NY")))
str(rawdata)

rawdata <-  
  rename(.data=rawdata, `Size (cm)` = size, #newname=oldname
         `Weight (kg)` = weight) |> 
  select(-`Sex_m`)

str(rawdata)
saveRDS(rawdata,file = "data/rawdata.rds")
```

### ODS files

Package readODS provides similar functionality for OpenOffice/LibreOffice files.

### Excel file with units row

1.  Import names section and data section separately

2.  Loop over all columns

    1.  test for existence of unit, if not NA

    2.  paste 1st row, " \[", 2nd row,"\]"

3.  Use 1st row as colnames for data

```{r}
cn_temp <- read_excel(path = "./data/Medtest_e.xlsx",
                      range = "A1:Y2",col_names = FALSE,
                      sheet = 2)
for(col_i in colnames(cn_temp)){
  if(!is.na(cn_temp |> slice(2) |> pull(col_i))){
    cn_temp[1,col_i] <- 
      paste0(cn_temp[1,col_i], " [", cn_temp[2,col_i], "]")
  }
}

rawdata <- read_excel(path = "data/Medtest_e.xlsx",
                      skip = 2, col_names = FALSE,
                      sheet = 2)
colnames(rawdata) <- cn_temp[1,]
```

## Import from SPSS/SAS

Import from SPSS generic files is implemented in various packages:

-   foreign::read.spss is a more base approach,

    -   on the positive side it has an option to read in value labels

    -   on the other hand it returns lists or data frames, so casting into tibble is advised

-   haven::read_sav comes from tidyverse

    -   variable- and value-labels are imported into attributes

    -   as_factor uses value labels

```{r}
import1 <- read.spss(file = "./data/Zellbeads.sav",
                     to.data.frame = TRUE,
                     use.value.labels = TRUE)
str(import1)

import2 <- read_sav(file = "data/Zellbeads.sav")
str(import2$Bedingung)
attr(import2$Bedingung,"labels")
import2 <- mutate(import2,
                  Bedingung=as_factor(Bedingung))
str(import2$Bedingung)
```
