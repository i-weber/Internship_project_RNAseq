sets = c("DEXSeq","SUPPA", "rMATS", "edgeR"),
keep.order = TRUE, # Keeps the set order specified
intersections = list(
list("edgeR", "DEXSeq"),
list("SUPPA", "DEXSeq"),
list("rMATS", "DEXSeq"),
list("rMATS", "SUPPA")
),  # keep only bars for where there is an overlap and avoid using the simple counts for the datasets
number.angles = 30, # Rotate the numbers for better readability
mainbar.y.label = "Overlapping Genes", # Label for the main bar
sets.x.label = "Number of Genes", # Label for the set sizes
set_size.show = TRUE, # show nr of exons in each set
show.numbers = "yes", # Show the intersection sizes
sets.bar.color = set_colors,
shade.alpha = 0.5,
point.size = 10,
# text scale is organized as such: c(intersection size title, intersection size tick labels, set size title, set size tick labels, set names, numbers above bars)
text.scale = c(5, # intersection size title
3, # intersection size tick labels
3, # set size axis title
3, # set size tick labels
5, # set names
5 # numbers above bars
)
plot_UpSet_exons_improved
View(input_list)
View(set_matrix)
View(membership_matrix)
# Collect all variables from the global environment
all_vars_exons <- mget(ls(), envir = .GlobalEnv)
# Save the collected variables as an RDS file
saveRDS(all_vars_exons, file = "./results/all_variables_exons.rds")
View(set_matrix)
sum(set_matrix$rMATS == TRUE)
sum(set_matrix$DEXSeq == TRUE)
# Collect all variables from the global environment
all_vars_exons <- mget(ls(), envir = .GlobalEnv)
# Save the collected variables as an RDS file
saveRDS(all_vars_exons, file = "./results/all_variables_exons.rds")
fig
View(intersection_counts)
View(membership_matrix)
pacman::p_load(readxl,
plotly,
conflicted,
tidyverse,
ggplot2,
readr,
htmlwidgets,
rsconnect,
wrappedtools,
RColorBrewer,
UpSetR,
grid,
flextable)
conflict_scout()
conflicts_prefer(dplyr::filter,
plotly::layout)
View(all_vars_exons)
View(set_matrix)
# Filter genes that are found in the overlaps
overlap_DEXSeq_edgeR <- set_matrix %>% filter(DEXSeq == TRUE & edgeR == TRUE) %>% pull(gene_id)
overlap_SUPPA_DEXSeq <- set_matrix %>% filter(SUPPA == TRUE & DEXSeq == TRUE) %>% pull(gene_id)
overlap_rMATS_DEXSeq <- set_matrix %>% filter(rMATS == TRUE & DEXSeq == TRUE) %>% pull(gene_id)
overlap_rMATS_SUPPA <- set_matrix %>% filter(rMATS == TRUE & SUPPA == TRUE) %>% pull(gene_id)
# Union of all overlaps (genes present in at least two datasets)
union_all <- set_matrix %>%
filter((rMATS + DEXSeq + edgeR + SUPPA) >= 2) %>%
pull(gene_id)
# Create a data frame with columns of different lengths (pad with NA)
gene_table <- tibble(
DEXSeq_edgeR = c(overlap_DEXSeq_edgeR, rep(NA, max(0, length(union_all) - length(overlap_DEXSeq_edgeR)))),
SUPPA_DEXSeq = c(overlap_SUPPA_DEXSeq, rep(NA, max(0, length(union_all) - length(overlap_SUPPA_DEXSeq)))),
rMATS_DEXSeq = c(overlap_rMATS_DEXSeq, rep(NA, max(0, length(union_all) - length(overlap_rMATS_DEXSeq)))),
rMATS_SUPPA = c(overlap_rMATS_SUPPA, rep(NA, max(0, length(union_all) - length(overlap_rMATS_SUPPA)))),
Union_All = c(union_all, rep(NA, max(0, length(union_all) - length(union_all))))
)
# Create a FlexTable from the data frame
ft <- flextable(gene_table) %>%
set_header_labels(
DEXSeq_edgeR = "DEXSeq-edgeR",
SUPPA_DEXSeq = "SUPPA-DEXSeq",
rMATS_DEXSeq = "rMATS-DEXSeq",
rMATS_SUPPA = "rMATS-SUPPA",
Union_All = "Union of Overlaps"
) %>%
autofit() %>%   # Automatically fit columns to content
theme_box()     # Apply a simple box theme to the table
# Display the FlexTable
ft
str(overlap_DEXSeq_edgeR)
typeof(overlap_DEXSeq_edgeR)
# Original colors for each column (header)
header_colors <- c("#9ab294", "#fcdb80", "#dcd3a6", "#dcb6ac", "#999999")  # Gray for Union
# Tint colors (lighter versions of the header colors)
tint_colors <- c("#d0dcd1", "#fef3d0", "#ece8d9", "#f3dedc", "#dddddd")
flextable(gene_table) %>%
set_header_labels(
DEXSeq_edgeR = "DEXSeq-edgeR",
SUPPA_DEXSeq = "SUPPA-DEXSeq",
rMATS_DEXSeq = "rMATS-DEXSeq",
rMATS_SUPPA = "rMATS-SUPPA",
Union_All = "Union of Overlaps"
) %>%
bg(part = "header", bg = header_colors) %>%
autofit() %>%   # Automatically fit columns to content
theme_box()     # Apply a simple box theme to the table
# Filter genes that are found in the overlaps
overlap_DEXSeq_edgeR <- set_matrix |> filter(DEXSeq == TRUE & edgeR == TRUE) |> pull(gene_id)
overlap_SUPPA_DEXSeq <- set_matrix |> filter(SUPPA == TRUE & DEXSeq == TRUE) |> pull(gene_id)
overlap_rMATS_DEXSeq <- set_matrix |> filter(rMATS == TRUE & DEXSeq == TRUE) |> pull(gene_id)
overlap_rMATS_SUPPA <- set_matrix |> filter(rMATS == TRUE & SUPPA == TRUE) |> pull(gene_id)
# Union of all overlaps (genes present in at least two datasets)
union_all <- set_matrix |>
filter((rMATS + DEXSeq + edgeR + SUPPA) >= 2) |>
pull(gene_id)
# Create a data frame with columns of different lengths (pad with NA)
gene_overlap_table <- tibble(
DEXSeq_edgeR = c(overlap_DEXSeq_edgeR, rep(NA, max(0, length(union_all) - length(overlap_DEXSeq_edgeR)))),
SUPPA_DEXSeq = c(overlap_SUPPA_DEXSeq, rep(NA, max(0, length(union_all) - length(overlap_SUPPA_DEXSeq)))),
rMATS_DEXSeq = c(overlap_rMATS_DEXSeq, rep(NA, max(0, length(union_all) - length(overlap_rMATS_DEXSeq)))),
rMATS_SUPPA = c(overlap_rMATS_SUPPA, rep(NA, max(0, length(union_all) - length(overlap_rMATS_SUPPA)))),
Union_All = c(union_all, rep(NA, max(0, length(union_all) - length(union_all))))
)
# Choose colors for the flextable to match the overlap bar colors from the UpSet plot (I set those colors up in Illustrat
flextable(gene_overlap_table) |>
set_header_labels(
DEXSeq_edgeR = "DEXSeq-edgeR",
SUPPA_DEXSeq = "SUPPA-DEXSeq",
rMATS_DEXSeq = "rMATS-DEXSeq",
rMATS_SUPPA = "rMATS-SUPPA",
Union_All = "Union of Overlaps"
) |>
bg(part = "header", bg = header_colors) |>
autofit() |>   # Automatically fit columns to content
theme_box()
# Alternate background rows: apply tint to odd rows and white to even rows
for (i in seq_along(tint_colors)) {
ft <- ft |>
bg(i = seq(1, nrows(gene_overlap_table), 2), j = i, bg = "white", part = "body") |>  # White for even rows
bg(i = seq(2, nrows(gene_overlap_table), 2), j = i, bg = tint_colors[i], part = "body")
}# Tint color for odd rows
# Display the FlexTable
ft
# Create a FlexTable from the data frame
ft <- flextable(gene_overlap_table) |>
set_header_labels(
DEXSeq_edgeR = "DEXSeq-edgeR",
SUPPA_DEXSeq = "SUPPA-DEXSeq",
rMATS_DEXSeq = "rMATS-DEXSeq",
rMATS_SUPPA = "rMATS-SUPPA",
Union_All = "Union of Overlaps"
) |>
bg(part = "header", bg = header_colors) |>
autofit() |>   # Automatically fit columns to content
theme_box()     # Apply a simple box theme to the table
# Alternate background rows: apply tint to odd rows and white to even rows
for (i in seq_along(tint_colors)) {
ft <- ft |>
bg(i = seq(1, nrows(gene_overlap_table), 2), j = i, bg = "white", part = "body") |>  # White for even rows
bg(i = seq(2, nrows(gene_overlap_table), 2), j = i, bg = tint_colors[i], part = "body")
}# Tint color for odd rows
# Alternate background rows: apply tint to odd rows and white to even rows
for (i in seq_along(tint_colors)) {
ft <- ft |>
bg(i = seq(1, nrow(gene_overlap_table), 2), j = i, bg = "white", part = "body") |>  # White for even rows
bg(i = seq(2, nrow(gene_overlap_table), 2), j = i, bg = tint_colors[i], part = "body")
}# Tint color for odd rows
# Display the FlexTable
ft
# Create a data frame with columns of different lengths (pad with NA)
gene_overlap_table <- tibble(
DEXSeq_edgeR = c(overlap_DEXSeq_edgeR, rep(NA, max(0, length(union_all) - length(overlap_DEXSeq_edgeR)))),
SUPPA_DEXSeq = c(overlap_SUPPA_DEXSeq, rep(NA, max(0, length(union_all) - length(overlap_SUPPA_DEXSeq)))),
rMATS_DEXSeq = c(overlap_rMATS_DEXSeq, rep(NA, max(0, length(union_all) - length(overlap_rMATS_DEXSeq)))),
rMATS_SUPPA = c(overlap_rMATS_SUPPA, rep(NA, max(0, length(union_all) - length(overlap_rMATS_SUPPA)))),
Union_All = sort(c(union_all, rep(NA, max(0, length(union_all) - length(union_all)))))
)
# Create a FlexTable from the data frame
overlap_flextable <- flextable(gene_overlap_table) |>
set_header_labels(
DEXSeq_edgeR = "DEXSeq-edgeR",
SUPPA_DEXSeq = "SUPPA-DEXSeq",
rMATS_DEXSeq = "rMATS-DEXSeq",
rMATS_SUPPA = "rMATS-SUPPA",
Union_All = "All Genes in >1 dataset"
) |>
bg(part = "header", bg = header_colors) |>
autofit() |>   # Automatically fit columns to content
theme_box()     # Apply a simple box theme to the table
# Alternate background rows: apply tint to odd rows and white to even rows
for (i in seq_along(tint_colors)) {
overlap_flextable <- overlap_flextable |>
bg(i = seq(1, nrow(gene_overlap_table), 2), j = i, bg = "white", part = "body") |>  # White for even rows
bg(i = seq(2, nrow(gene_overlap_table), 2), j = i, bg = tint_colors[i], part = "body")
}# Tint color for odd rows
# Display the FlexTable
overlap_flextable
# Create a FlexTable from the data frame
overlap_flextable <- flextable(gene_overlap_table) |>
set_header_labels(
DEXSeq_edgeR = "DEXSeq-edgeR",
SUPPA_DEXSeq = "SUPPA-DEXSeq",
rMATS_DEXSeq = "rMATS-DEXSeq",
rMATS_SUPPA = "rMATS-SUPPA",
Union_All = "All Genes in<br>>1 dataset"
) |>
bg(part = "header", bg = header_colors) |>
autofit() |>   # Automatically fit columns to content
theme_box()     # Apply a simple box theme to the table
# Alternate background rows: apply tint to odd rows and white to even rows
for (i in seq_along(tint_colors)) {
overlap_flextable <- overlap_flextable |>
bg(i = seq(1, nrow(gene_overlap_table), 2), j = i, bg = "white", part = "body") |>  # White for even rows
bg(i = seq(2, nrow(gene_overlap_table), 2), j = i, bg = tint_colors[i], part = "body")
}# Tint color for odd rows
# Display the FlexTable
overlap_flextable
# Create a FlexTable from the data frame
overlap_flextable <- flextable(gene_overlap_table) |>
set_header_labels(
DEXSeq_edgeR = "DEXSeq-edgeR",
SUPPA_DEXSeq = "SUPPA-DEXSeq",
rMATS_DEXSeq = "rMATS-DEXSeq",
rMATS_SUPPA = "rMATS-SUPPA",
Union_All = "All Genes in\n>1 dataset"
) |>
bg(part = "header", bg = header_colors) |>
autofit() |>   # Automatically fit columns to content
theme_box()     # Apply a simple box theme to the table
# Alternate background rows: apply tint to odd rows and white to even rows
for (i in seq_along(tint_colors)) {
overlap_flextable <- overlap_flextable |>
bg(i = seq(1, nrow(gene_overlap_table), 2), j = i, bg = "white", part = "body") |>  # White for even rows
bg(i = seq(2, nrow(gene_overlap_table), 2), j = i, bg = tint_colors[i], part = "body")
}# Tint color for odd rows
# Display the FlexTable
overlap_flextable
# Create a FlexTable from the data frame
overlap_flextable <- flextable(gene_overlap_table) |>
set_header_labels(
DEXSeq_edgeR = "DEXSeq-edgeR",
SUPPA_DEXSeq = "SUPPA-DEXSeq",
rMATS_DEXSeq = "rMATS-DEXSeq",
rMATS_SUPPA = "rMATS-SUPPA",
Union_All = "All Genes in\n>1 dataset"
) |>
bg(part = "header", bg = header_colors) |>
autofit() |>   # Automatically fit columns to content
theme_box() |>    # Apply a simple box theme to the table
border_remove()
# Alternate background rows: apply tint to odd rows and white to even rows
for (i in seq_along(tint_colors)) {
overlap_flextable <- overlap_flextable |>
bg(i = seq(1, nrow(gene_overlap_table), 2), j = i, bg = "white", part = "body") |>  # White for even rows
bg(i = seq(2, nrow(gene_overlap_table), 2), j = i, bg = tint_colors[i], part = "body")
}# Tint color for odd rows
# Display the FlexTable
overlap_flextable
# Create a FlexTable from the data frame
overlap_flextable <- flextable(gene_overlap_table) |>
set_header_labels(
DEXSeq_edgeR = "DEXSeq-edgeR",
SUPPA_DEXSeq = "SUPPA-DEXSeq",
rMATS_DEXSeq = "rMATS-DEXSeq",
rMATS_SUPPA = "rMATS-SUPPA",
Union_All = "All Genes in\n>1 dataset"
) |>
bg(part = "header", bg = header_colors) |>
autofit() |>   # Automatically fit columns to content
theme_box() |>    # Apply a simple box theme to the table
border_remove() |>
padding(padding.top = 1, padding.bottom = 1)
overlap_flextable
# Alternate background rows: apply tint to odd rows and white to even rows
for (i in seq_along(tint_colors)) {
overlap_flextable <- overlap_flextable |>
bg(i = seq(1, nrow(gene_overlap_table), 2), j = i, bg = "white", part = "body") |>  # White for even rows
bg(i = seq(2, nrow(gene_overlap_table), 2), j = i, bg = tint_colors[i], part = "body")
}# Tint color for odd rows
# Display the FlexTable
overlap_flextable
#pacman::p_install(htmlwidgets) #pacman::p_install(rsconnect)
pacman::p_install(webshot2)
pacman::p_load(readxl,
plotly,
conflicted,
tidyverse,
ggplot2,
readr,
htmlwidgets,
rsconnect,
wrappedtools,
RColorBrewer,
UpSetR,
grid,
webshot2)
conflict_scout()
conflicts_prefer(dplyr::filter,
plotly::layout)
# Save flextable as image
save_as_image(overlap_flextable, path = "./plots/overlap_flextable.png", webshot = "webshot2", zoom = 150 / 96)
flextable(gene_overlap_table) |>
set_header_labels(
DEXSeq_edgeR = "DEXSeq-edgeR",
SUPPA_DEXSeq = "SUPPA-DEXSeq",
rMATS_DEXSeq = "rMATS-DEXSeq",
rMATS_SUPPA = "rMATS-SUPPA",
Union_All = "All Genes in\n>1 dataset"
) |>
bg(part = "header", bg = header_colors) |>
autofit() |>   # Automatically fit columns to content
theme_box() |>    # Apply a simple box theme to the table
border_remove() |>
padding(padding.top = 1, padding.bottom = 1) |>
fontsize(part = "header", size = 10)
# Create a FlexTable from the data frame
overlap_flextable <- flextable(gene_overlap_table) |>
set_header_labels(
DEXSeq_edgeR = "DEXSeq-edgeR",
SUPPA_DEXSeq = "SUPPA-DEXSeq",
rMATS_DEXSeq = "rMATS-DEXSeq",
rMATS_SUPPA = "rMATS-SUPPA",
Union_All = "All Genes in\n>1 dataset"
) |>
bg(part = "header", bg = header_colors) |>
autofit() |>   # Automatically fit columns to content
theme_box() |>    # Apply a simple box theme to the table
border_remove() |>
padding(padding.top = 1, padding.bottom = 1) |>
fontsize(part = "header", size = 10)
# Alternate background rows: apply tint to odd rows and white to even rows
for (i in seq_along(tint_colors)) {
overlap_flextable <- overlap_flextable |>
bg(i = seq(1, nrow(gene_overlap_table), 2), j = i, bg = "white", part = "body") |>  # White for even rows
bg(i = seq(2, nrow(gene_overlap_table), 2), j = i, bg = tint_colors[i], part = "body")
}# Tint color for odd rows
# Display the FlexTable
overlap_flextable
# Save flextable as image
save_as_image(overlap_flextable, path = "./plots/overlap_flextable.png", webshot = "webshot2", zoom = 150 / 96) # reso you want/default reso, which is 96 dpi
# Filter genes that are found in the overlaps
overlap_DEXSeq_edgeR <- set_matrix |> filter(DEXSeq == TRUE & edgeR == TRUE) |> pull(gene_id)
overlap_SUPPA_DEXSeq <- set_matrix |> filter(SUPPA == TRUE & DEXSeq == TRUE) |> pull(gene_id)
overlap_rMATS_DEXSeq <- set_matrix |> filter(rMATS == TRUE & DEXSeq == TRUE) |> pull(gene_id)
overlap_rMATS_SUPPA <- set_matrix |> filter(rMATS == TRUE & SUPPA == TRUE) |> pull(gene_id)
# Union of all overlaps (genes present in at least two datasets)
union_all <- set_matrix |>
filter((rMATS + DEXSeq + edgeR + SUPPA) >= 2) |>
pull(gene_id)
# Create a data frame with columns of different lengths (pad with NA)
gene_overlap_table <- tibble(
DEXSeq_edgeR = c(overlap_DEXSeq_edgeR, rep(NA, max(0, length(union_all) - length(overlap_DEXSeq_edgeR)))),
SUPPA_DEXSeq = c(overlap_SUPPA_DEXSeq, rep(NA, max(0, length(union_all) - length(overlap_SUPPA_DEXSeq)))),
rMATS_DEXSeq = c(overlap_rMATS_DEXSeq, rep(NA, max(0, length(union_all) - length(overlap_rMATS_DEXSeq)))),
rMATS_SUPPA = c(overlap_rMATS_SUPPA, rep(NA, max(0, length(union_all) - length(overlap_rMATS_SUPPA)))),
Union_All = sort(c(union_all, rep(NA, max(0, length(union_all) - length(union_all)))))
)
# Choose colors for the flextable to match the overlap bar colors from the UpSet plot (I set those colors up in Illustrator, not R, because UpSetR does not offer enough customization options to do so)
# Original colors for each column (header)
header_colors <- c("#9ab294", "#fcdb80", "#dcd3a6", "#dcb6ac", "#999999")  # Gray for Union
# Tint colors (lighter versions of the header colors)
tint_colors <- c("#d0dcd1", "#fef3d0", "#ece8d9", "#f3dedc", "#dddddd")
# Create a FlexTable from the data frame
overlap_flextable <- flextable(gene_overlap_table) |>
set_header_labels(
DEXSeq_edgeR = "DEXSeq✚edgeR",
SUPPA_DEXSeq = "SUPPA✚DEXSeq",
rMATS_DEXSeq = "rMATS✚DEXSeq",
rMATS_SUPPA = "rMATS✚SUPPA",
Union_All = "All Genes in\n>1 dataset"
) |>
bg(part = "header", bg = header_colors) |>
autofit() |>   # Automatically fit columns to content
theme_box() |>    # Apply a simple box theme to the table
border_remove() |>
padding(padding.top = 1, padding.bottom = 1) |>
fontsize(part = "header", size = 10)
# Alternate background rows: apply tint to odd rows and white to even rows
for (i in seq_along(tint_colors)) {
overlap_flextable <- overlap_flextable |>
bg(i = seq(1, nrow(gene_overlap_table), 2), j = i, bg = "white", part = "body") |>  # White for even rows
bg(i = seq(2, nrow(gene_overlap_table), 2), j = i, bg = tint_colors[i], part = "body")
}# Tint color for odd rows
# Display the FlexTable
overlap_flextable
# Save flextable as image
save_as_image(overlap_flextable, path = "./plots/overlap_flextable.png", webshot = "webshot2", zoom = 150 / 96) # reso you want/default reso, which is 96 dpi
# Filter genes that are found in the overlaps
overlap_DEXSeq_edgeR <- set_matrix |> filter(DEXSeq == TRUE & edgeR == TRUE) |> pull(gene_id)
overlap_SUPPA_DEXSeq <- set_matrix |> filter(SUPPA == TRUE & DEXSeq == TRUE) |> pull(gene_id)
overlap_rMATS_DEXSeq <- set_matrix |> filter(rMATS == TRUE & DEXSeq == TRUE) |> pull(gene_id)
overlap_rMATS_SUPPA <- set_matrix |> filter(rMATS == TRUE & SUPPA == TRUE) |> pull(gene_id)
# Union of all overlaps (genes present in at least two datasets)
union_all <- set_matrix |>
filter((rMATS + DEXSeq + edgeR + SUPPA) >= 2) |>
pull(gene_id)
# Create a data frame with columns of different lengths (pad with NA)
gene_overlap_table <- tibble(
DEXSeq_edgeR = c(overlap_DEXSeq_edgeR, rep(NA, max(0, length(union_all) - length(overlap_DEXSeq_edgeR)))),
SUPPA_DEXSeq = c(overlap_SUPPA_DEXSeq, rep(NA, max(0, length(union_all) - length(overlap_SUPPA_DEXSeq)))),
rMATS_DEXSeq = c(overlap_rMATS_DEXSeq, rep(NA, max(0, length(union_all) - length(overlap_rMATS_DEXSeq)))),
rMATS_SUPPA = c(overlap_rMATS_SUPPA, rep(NA, max(0, length(union_all) - length(overlap_rMATS_SUPPA)))),
Union_All = sort(c(union_all, rep(NA, max(0, length(union_all) - length(union_all)))))
)
# Choose colors for the flextable to match the overlap bar colors from the UpSet plot (I set those colors up in Illustrator, not R, because UpSetR does not offer enough customization options to do so)
# Original colors for each column (header)
header_colors <- c("#9ab294", "#fcdb80", "#dcd3a6", "#dcb6ac", "#999999")  # Gray for Union
# Tint colors (lighter versions of the header colors)
tint_colors <- c("#d0dcd1", "#fef3d0", "#ece8d9", "#f3dedc", "#dddddd")
# Create a FlexTable from the data frame
overlap_flextable <- flextable(gene_overlap_table) |>
set_header_labels(
DEXSeq_edgeR = "DEXSeq ✚ edgeR",
SUPPA_DEXSeq = "SUPPA ✚ DEXSeq",
rMATS_DEXSeq = "rMATS ✚ DEXSeq",
rMATS_SUPPA = "rMATS ✚ SUPPA",
Union_All = "All Genes in\n>1 dataset"
) |>
bg(part = "header", bg = header_colors) |>
autofit() |>   # Automatically fit columns to content
theme_box() |>    # Apply a simple box theme to the table
border_remove() |>
padding(padding.top = 1, padding.bottom = 1) |>
fontsize(part = "header", size = 10)
# Alternate background rows: apply tint to odd rows and white to even rows
for (i in seq_along(tint_colors)) {
overlap_flextable <- overlap_flextable |>
bg(i = seq(1, nrow(gene_overlap_table), 2), j = i, bg = "white", part = "body") |>  # White for even rows
bg(i = seq(2, nrow(gene_overlap_table), 2), j = i, bg = tint_colors[i], part = "body")
}# Tint color for odd rows
# Display the FlexTable
overlap_flextable
# Save flextable as image
save_as_image(overlap_flextable, path = "./plots/overlap_flextable.png", webshot = "webshot2", zoom = 150 / 96) # reso you want/default reso, which is 96 dpi
shiny::runApp('results/test_app')
library(shiny)
# Define UI for the application
ui <- fluidPage(
# Tabs for different content areas
tabsetPanel(
# First tab with subsections and navigation
tabPanel("Tab 1: Gene Expression",
sidebarLayout(
# Main panel for content in the first tab
mainPanel(
width = 9, # Leave space for the navigation panel on the right
h3(id = "section1_tab1", "Section 1: Introduction"),
p("This is the content for section 1 in Tab 1."),
h3(id = "section2_tab1", "Section 2: Gene Expression Analysis"),
p("This is the content for section 2 in Tab 1."),
h3(id = "section3_tab1", "Section 3: Data Visualization"),
p("This is the content for section 3 in Tab 1.")
),
# Sidebar for navigation in Tab 1
sidebarPanel(
width = 3, # Adjust width of the navigation panel
h4("Navigation"),
tags$ul(
tags$li(tags$a(href = "#section1_tab1", "Introduction")),
tags$li(tags$a(href = "#section2_tab1", "Gene Expression Analysis")),
tags$li(tags$a(href = "#section3_tab1", "Data Visualization"))
)
),
# Second tab with its own subsections and navigation
tabPanel("Tab 2: Transcript Analysis",
sidebarLayout(
# Main panel for content in the second tab
mainPanel(
width = 9, # Leave space for the navigation panel on the right
h3(id = "section1_tab2", "Section 1: Overview"),
p("This is the content for section 1 in Tab 2."),
h3(id = "section2_tab2", "Section 2: Transcript Analysis"),
p("This is the content for section 2 in Tab 2."),
h3(id = "section3_tab2", "Section 3: Data Interpretation"),
p("This is the content for section 3 in Tab 2.")
),
# Sidebar for navigation in Tab 2
sidebarPanel(
width = 3, # Adjust width of the navigation panel
h4("Navigation"),
tags$ul(
tags$li(tags$a(href = "#section1_tab2", "Overview")),
tags$li(tags$a(href = "#section2_tab2", "Transcript Analysis")),
tags$li(tags$a(href = "#section3_tab2", "Data Interpretation"))
)
# Add more tabs similarly...
)
# Define server logic
server <- function(input, output, session) {}
# Run the application
shinyApp(ui = ui, server = server)
pacman::p_load(readxl,
rlist,
plotly,
conflicted,
tidyverse,
ggplot2,
readr,
htmlwidgets,
rsconnect,
wrappedtools,
RColorBrewer,
UpSetR)
conflict_scout()
conflicts_prefer(dplyr::filter,
plotly::layout)
# Load the variables from the RDS file
loaded_vars <- readRDS("./results/all_vars_general_stats.rds")
# Optionally, assign them back to the global environment
list2env(loaded_vars, envir = .GlobalEnv)
plot_list[8]
