hoverinfo = 'y+text',  # Display y-value and additional text on hover
text = ~paste("Gene:", Gene, "<br>Count:", Counts),
showlegend = FALSE
) |>
layout(
title = "Distribution of Read Counts per Gene and Sample",
yaxis = list(title = "Raw Counts")
)
plot_ly(
data = raw_nonnorm_counts_long,
x = ~Sample,
y = ~Counts,
type = 'violin',
color = ~Sample,
box = list(visible = TRUE),  # optional boxplot inside the violin plot
meanline = list(visible = TRUE),  # optional line for the mean
#points = "all",  # Show all data points
jitter = 0.3,  # Add some jitter to points for better visibility
hoverinfo = 'y+text',  # Display y-value and additional text on hover
text = ~paste("Gene:", Gene, "<br>Count:", Counts),
showlegend = FALSE
) |>
layout(
title = "Distribution of Read Counts per Gene and Sample",
yaxis = list(title = "Raw Counts")
)
plot_ly(
data = raw_nonnorm_counts_long,
x = ~Sample,
y = ~Counts,
type = 'violin',
color = ~Sample,
box = list(visible = TRUE),  # optional boxplot inside the violin plot
meanline = list(visible = TRUE),  # optional line for the mean
#points = "all",  # Show all data points
#jitter = 0.3,  # Add some jitter to points for better visibility
hoverinfo = 'y+text',  # Display y-value and additional text on hover
text = ~paste("Gene:", Gene, "<br>Count:", Counts),
showlegend = FALSE
) |>
layout(
title = "Distribution of Read Counts per Gene and Sample",
yaxis = list(title = "Raw Counts")
)
plot_ly(
data = raw_nonnorm_counts_long,
x = ~Sample,
y = ~Counts,
type = 'violin',
color = ~Sample,
box = list(visible = TRUE),  # optional boxplot inside the violin plot
meanline = list(visible = TRUE),  # optional line for the mean
#points = "all",  # Show all data points
#jitter = 0.3,  # Add some jitter to points for better visibility
hoverinfo = 'text',  # Display y-value and additional text on hover
text = ~paste("Gene:", Gene, "<br>Count:", Counts),
showlegend = FALSE
) |>
layout(
title = "Distribution of Read Counts per Gene and Sample",
yaxis = list(title = "Raw Counts")
)
# Extract the row names (gene or transcript identifiers)
rownames_original <- rownames(raw_counts_matrix)
rownames_modified <- gsub("^(gene-|id-|rna-)", "", rownames_original)
# Reassign the modified row names back to the counts matrix
rownames(raw_counts_matrix) <- rownames_modified
View(plot_violin_raw_counts)
str(raw_counts_matrix)
Remove prefixes from gene names
difference_matrix <- raw_counts_matrix - raw_nonnorm_counts
heatmap_plot <- plot_ly(
x = colnames(difference_matrix),  # Samples
y = rownames(difference_matrix),  # Genes
z = difference_matrix,  # Difference in counts
type = "heatmap",
colorscale = "Viridis",  # Use the Viridis color scale
colorbar = list(title = "Count Difference"),
hoverinfo = "x+y+z",  # Show x, y, and z values on hover
showscale = TRUE
) %>%
layout(
title = list(
text = "Heatmap of Differences Between Count Matrices",
font = list(size = 14),  # Adjust title font size
y = 0.95,  # Position title above the plot area
x = 0.5,
xanchor = "center",
yanchor = "top"
),
xaxis = list(title = "Samples"),
yaxis = list(title = "Genes")
)
# Display the heatmap
heatmap_plot
# Reassign the modified row names back to the counts matrix
rownames(raw_nonnorm_counts) <- rownames_modified
# get the proper sample names from the ddsTxi object to replace the default names of the raw_nonnorm_counts column
colnames(raw_nonnorm_counts) <- my_ddsTxi@colData$sample
# create a named vector from the sums of counts per column (sample)
count_sums_vector <- colSums(raw_nonnorm_counts)
# get a raw counts tibble (transpose the named vector of count sums resutling by colSums and convert without doing anything to the names)
total_raw_counts <- as_tibble(t(count_sums_vector), .name_repair = "minimal") |> rename_with(~colnames(raw_nonnorm_counts))
# create a named vector of the log2 transformed sum of counts (+1 to avoid issues where counts are 0)
log2count_sums_vector <- colSums(log2(raw_nonnorm_counts+1))
log2_total_raw_counts <- as_tibble(t(log2count_sums_vector), .name_repair = "minimal") |> rename_with(~colnames(raw_nonnorm_counts))
# Pivot the two tibbles longer for easier plotting
total_raw_counts_long <- pivot_longer(total_raw_counts, cols = everything(), names_to = "Sample", values_to = "TotalCounts")
log2_total_raw_counts_long <- pivot_longer(log2_total_raw_counts, cols = everything(), names_to = "Sample", values_to = "log2TotalCounts")
# Create an interactive bar plot for total raw counts
total_raw_counts_plot <- plot_ly(
data = total_raw_counts_long,
x = ~Sample,
y = ~TotalCounts,
type = 'bar',
hoverinfo = 'y', # show y value on hover
textposition = 'none', # make sure no text within bars
marker = list(color = 'rgba(50, 171, 96, 0.6)', width = 1)
) |>
layout(
title = "Total Raw Counts per Sample",
xaxis = list(title = "Sample"),
yaxis = list(title = "Total Counts")
)
# Display the plot
total_raw_counts_plot
# Create an interactive bar plot for log-transformed raw counts
log2_total_raw_counts_plot <- plot_ly(
data = log2_total_raw_counts_long,
x = ~Sample,
y = ~log2TotalCounts,
type = 'bar',
#text = ~paste("Sample:", Sample, "<br>Total Counts:", TotalCounts),
hoverinfo = 'y',
textposition = 'none', # make sure no text within bars
marker = list(color = 'rgba(119, 95, 128, 0.6)', width = 1)
) |>
layout(
title = "log2(Total Raw Counts) per Sample",
xaxis = list(title = "Sample"),
yaxis = list(title = "log2(Total Counts)")
)
# Display the plot
log2_total_raw_counts_plot
# generate matrix where raw counts are log-transformed
log2_counts <- log2(raw_nonnorm_counts+1)
# turn the raw_nonnorm_counts and log2_counts matrices into tibbles to be able to pivot them
raw_nonnorm_counts_tib <- as_tibble(raw_nonnorm_counts, rownames = "Gene")
log2_counts_tib <- as_tibble(log2_counts, rownames = "Gene")
# Pivot the two tibbles longer for easier plotting
raw_nonnorm_counts_long <- pivot_longer(raw_nonnorm_counts_tib,
cols = -Gene,
names_to = "Sample",
values_to = "Counts")
log2_counts_long <- pivot_longer(log2_counts_tib,
cols = -Gene,
names_to = "Sample",
values_to = "log2Counts")
plot_ly(
data = raw_nonnorm_counts_long,
x = ~Sample,
y = ~Counts,
type = 'violin',
color = ~Sample,
box = list(visible = TRUE),  # optional boxplot inside the violin plot
meanline = list(visible = TRUE),  # optional line for the mean
#points = "all",  # Show all data points
#jitter = 0.3,  # Add some jitter to points for better visibility
hoverinfo = 'text',  # Display y-value and additional text on hover
text = ~paste(Gene, "<br>Count:", Counts),
showlegend = FALSE
) |>
layout(
title = "Distribution of Read Counts per Gene and Sample",
yaxis = list(title = "Raw Counts")
)
plot_ly(
data = raw_nonnorm_counts_long,
x = ~Sample,
y = ~Counts,
type = 'violin',
color = ~Sample,
box = list(visible = TRUE),  # optional boxplot inside the violin plot
meanline = list(visible = TRUE),  # optional line for the mean
#points = "all",  # Show all data points
#jitter = 0.3,  # Add some jitter to points for better visibility
hoverinfo = 'text',  # Display y-value and additional text on hover
text = ~paste(Gene, "<br>Count:", Counts),
showlegend = FALSE
) |>
layout(
title = "Distribution of Read Counts per Gene and Sample",
yaxis = yaxis = list(title = "Raw Counts", range = c(0, NA))
plot_ly(
data = raw_nonnorm_counts_long,
x = ~Sample,
y = ~Counts,
type = 'violin',
color = ~Sample,
box = list(visible = TRUE),  # optional boxplot inside the violin plot
meanline = list(visible = TRUE),  # optional line for the mean
#points = "all",  # Show all data points
#jitter = 0.3,  # Add some jitter to points for better visibility
hoverinfo = 'text',  # Display y-value and additional text on hover
text = ~paste(Gene, "<br>Count:", Counts),
showlegend = FALSE
) |>
layout(
title = "Distribution of Read Counts per Gene and Sample",
yaxis = list(title = "Raw Counts", range = c(0, NA))
)
summary(raw_nonnorm_counts_long$Counts)
plot_ly(
data = raw_nonnorm_counts_long,
x = ~Sample,
y = ~Counts,
type = 'violin',
color = ~Sample,
box = list(visible = TRUE),  # optional boxplot inside the violin plot
meanline = list(visible = TRUE),  # optional line for the mean
#points = "all",  # Show all data points
#jitter = 0.3,  # if showing all data points, add some jitter to points for better visibility
bandwidth = 0.5, #...or else KDE is calculated in a weird way that makes values around 300 counts plot on 0 on the y axis instead
hoverinfo = 'text',  # Display y-value and additional text on hover
text = ~paste(Gene, "<br>Count:", Counts),
showlegend = FALSE
) |>
layout(
title = "Distribution of Read Counts per Gene and Sample",
yaxis = list(title = "Raw Counts", range = c(0, NA))
)
plot_ly(
data = raw_nonnorm_counts_long,
x = ~Sample,
y = ~Counts,
type = 'violin',
color = ~Sample,
box = list(visible = TRUE),  # optional boxplot inside the violin plot
meanline = list(visible = TRUE),  # optional line for the mean
#points = "all",  # Show all data points
#jitter = 0.3,  # if showing all data points, add some jitter to points for better visibility
bandwidth = 0.25, #...or else KDE is calculated in a weird way that makes values around 300 counts plot on 0 on the y axis instead of at their real value
hoverinfo = 'text',  # Display y-value and additional text on hover
text = ~paste(Gene, "<br>Count:", Counts),
showlegend = FALSE
) |>
layout(
title = "Distribution of Read Counts per Gene and Sample",
yaxis = list(title = "Raw Counts", range = c(0, NA))
)
plot_ly(
data = raw_nonnorm_counts_long,
x = ~Sample,
y = ~Counts,
type = 'violin',
color = ~Sample,
box = list(visible = TRUE),  # optional boxplot inside the violin plot
meanline = list(visible = TRUE),  # optional line for the mean
#points = "all",  # Show all data points
#jitter = 0.3,  # if showing all data points, add some jitter to points for better visibility
bandwidth = 0.85, #...or else KDE is calculated in a weird way that makes values around 300 counts plot on 0 on the y axis instead of at their real value
hoverinfo = 'text',  # Display y-value and additional text on hover
text = ~paste(Gene, "<br>Count:", Counts),
showlegend = FALSE
) |>
layout(
title = "Distribution of Read Counts per Gene and Sample",
yaxis = list(title = "Raw Counts", range = c(0, NA))
)
plot_ly(
data = raw_nonnorm_counts_long,
x = ~Sample,
y = ~Counts,
type = 'violin',
color = ~Sample,
box = list(visible = TRUE),  # optional boxplot inside the violin plot
meanline = list(visible = TRUE),  # optional line for the mean
#points = "all",  # Show all data points
#jitter = 0.3,  # if showing all data points, add some jitter to points for better visibility
bandwidth = 3, #...or else KDE is calculated in a way that makes values around 300 counts plot on 0 on the y axis instead of at their real value (it oversmoothes the curves)
hoverinfo = 'text',  # Display y-value and additional text on hover
text = ~paste(Gene, "<br>Count:", Counts),
showlegend = FALSE
) |>
layout(
title = "Distribution of Read Counts per Gene and Sample",
yaxis = list(title = "Raw Counts", range = c(0, NA))
)
plot_ly(
data = raw_nonnorm_counts_long,
x = ~Sample,
y = ~Counts,
type = 'violin',
color = ~Sample,
box = list(visible = TRUE),  # optional boxplot inside the violin plot
meanline = list(visible = TRUE),  # optional line for the mean
#points = "all",  # Show all data points
#jitter = 0.3,  # if showing all data points, add some jitter to points for better visibility
bandwidth = 0.1, #...or else KDE is calculated in a way that makes values around 300 counts plot on 0 on the y axis instead of at their real value (it oversmoothes the curves)
hoverinfo = 'text',  # Display y-value and additional text on hover
text = ~paste(Gene, "<br>Count:", Counts),
showlegend = FALSE
) |>
layout(
title = "Distribution of Read Counts per Gene and Sample",
yaxis = list(title = "Raw Counts", range = c(0, NA))
)
plot_ly(
data = raw_nonnorm_counts_long,
x = ~Sample,
y = ~Counts,
type = 'violin',
color = ~Sample,
box = list(visible = TRUE),  # optional boxplot inside the violin plot
meanline = list(visible = TRUE),  # optional line for the mean
#points = "all",  # Show all data points
#jitter = 0.3,  # if showing all data points, add some jitter to points for better visibility
#bandwidth = 0.1, #...or else KDE is calculated in a way that makes values around 300 counts plot on 0 on the y axis instead of at their real value (it oversmoothes the curves)
hoverinfo = 'text',  # Display y-value and additional text on hover
text = ~paste(Gene, "<br>Count:", Counts),
showlegend = FALSE
) |>
layout(
title = "Distribution of Read Counts per Gene and Sample",
#yaxis = list(title = "Raw Counts", range = c(0, NA))
yaxis = list(title = "Raw Counts", range = c(0, NA), domain = c(0.2, 1)),  # Adjust the domain to shift the x-axis down
margin = list(t = 50, b = 100)  # Add bottom margin if necessary to prevent cut-off
)
plot_ly(
data = raw_nonnorm_counts_long,
x = ~Sample,
y = ~Counts,
type = 'violin',
color = ~Sample,
box = list(visible = TRUE),  # optional boxplot inside the violin plot
meanline = list(visible = TRUE),  # optional line for the mean
#points = "all",  # Show all data points
#jitter = 0.3,  # if showing all data points, add some jitter to points for better visibility
#bandwidth = 0.1, #...or else KDE is calculated in a way that makes values around 300 counts plot on 0 on the y axis instead of at their real value (it oversmoothes the curves)
hoverinfo = 'text',  # Display y-value and additional text on hover
text = ~paste(Gene, "<br>Count:", Counts),
showlegend = FALSE
) |>
layout(
title = "Distribution of Read Counts per Gene and Sample",
#yaxis = list(title = "Raw Counts", range = c(0, NA))
yaxis = list(title = "Raw Counts", range = c(0, NA), domain = c(0.2, 1)),  # Adjust the domain to shift the x-axis down
margin = list(t = 50, b = 150)  # Add bottom margin if necessary to prevent cut-off
)
plot_ly(
data = raw_nonnorm_counts_long,
x = ~Sample,
y = ~Counts,
type = 'violin',
color = ~Sample,
box = list(visible = TRUE),  # optional boxplot inside the violin plot
meanline = list(visible = TRUE),  # optional line for the mean
#points = "all",  # Show all data points
#jitter = 0.3,  # if showing all data points, add some jitter to points for better visibility
#bandwidth = 0.1, #...or else KDE is calculated in a way that makes values around 300 counts plot on 0 on the y axis instead of at their real value (it oversmoothes the curves)
hoverinfo = 'text',  # Display y-value and additional text on hover
text = ~paste(Gene, "<br>Count:", Counts),
showlegend = FALSE
) |>
layout(
title = "Distribution of Read Counts per Gene and Sample",
#yaxis = list(title = "Raw Counts", range = c(0, NA))
yaxis = list(title = "Raw Counts", range = c(0, NA), domain = c(0.5, 1)),  # Adjust the domain to shift the x-axis down
margin = list(t = 50, b = 150)  # Add bottom margin if necessary to prevent cut-off
)
plot_ly(
data = raw_nonnorm_counts_long,
x = ~Sample,
y = ~Counts,
type = 'violin',
color = ~Sample,
box = list(visible = TRUE),  # optional boxplot inside the violin plot
meanline = list(visible = TRUE),  # optional line for the mean
#points = "all",  # Show all data points
#jitter = 0.3,  # if showing all data points, add some jitter to points for better visibility
bandwidth = 0.9, #...or else KDE is calculated in a way that makes values around 300 counts plot on 0 on the y axis instead of at their real value (it oversmoothes the curves)
hoverinfo = 'text',  # Display y-value and additional text on hover
text = ~paste(Gene, "<br>Count:", Counts),
showlegend = FALSE
) |>
layout(
title = "Distribution of Read Counts per Gene and Sample",
yaxis = list(title = "Raw Counts", range = c(0, NA))
)
plot_ly(
data = raw_nonnorm_counts_long,
x = ~Sample,
y = ~Counts,
type = 'violin',
color = ~Sample,
box = list(visible = TRUE),  # optional boxplot inside the violin plot
meanline = list(visible = TRUE),  # optional line for the mean
#points = "all",  # Show all data points
#jitter = 0.3,  # if showing all data points, add some jitter to points for better visibility
bandwidth = 10, #...or else KDE is calculated in a way that makes values around 300 counts plot on 0 on the y axis instead of at their real value (it oversmoothes the curves)
hoverinfo = 'text',  # Display y-value and additional text on hover
text = ~paste(Gene, "<br>Count:", Counts),
showlegend = FALSE
) |>
layout(
title = "Distribution of Read Counts per Gene and Sample",
yaxis = list(title = "Raw Counts", range = c(0, NA))
)
plot_ly(
data = raw_nonnorm_counts_long,
x = ~Sample,
y = ~Counts,
type = 'violin',
color = ~Sample,
box = list(visible = TRUE),  # optional boxplot inside the violin plot
meanline = list(visible = TRUE),  # optional line for the mean
#points = "all",  # Show all data points
#jitter = 0.3,  # if showing all data points, add some jitter to points for better visibility
bandwidth = 200, #...or else KDE is calculated in a way that makes values around 300 counts plot on 0 on the y axis instead of at their real value (it oversmoothes the curves)
hoverinfo = 'text',  # Display y-value and additional text on hover
text = ~paste(Gene, "<br>Count:", Counts),
showlegend = FALSE
) |>
layout(
title = "Distribution of Read Counts per Gene and Sample",
yaxis = list(title = "Raw Counts", range = c(0, NA))
)
plot_ly(
data = raw_nonnorm_counts_long,
x = ~Sample,
y = ~Counts,
type = 'violin',
color = ~Sample,
box = list(visible = TRUE),  # optional boxplot inside the violin plot
meanline = list(visible = TRUE),  # optional line for the mean
#points = "all",  # Show all data points
#jitter = 0.3,  # if showing all data points, add some jitter to points for better visibility
bandwidth = 2000, #...or else KDE is calculated in a way that makes values around 300 counts plot on 0 on the y axis instead of at their real value (it oversmoothes the curves)
hoverinfo = 'text',  # Display y-value and additional text on hover
text = ~paste(Gene, "<br>Count:", Counts),
showlegend = FALSE
) |>
layout(
title = "Distribution of Read Counts per Gene and Sample",
yaxis = list(title = "Raw Counts", range = c(0, NA))
)
plot_violin_raw_counts <- plot_ly(
data = raw_nonnorm_counts_long,
x = ~Sample,
y = ~Counts,
type = 'violin',
color = ~Sample,
box = list(visible = TRUE),  # optional boxplot inside the violin plot
meanline = list(visible = TRUE),  # optional line for the mean
#points = "all",  # Show all data points
#jitter = 0.3,  # if showing all data points, add some jitter to points for better visibility
bandwidth = 150, #...or else KDE is calculated in a way that makes values around 300 counts plot on 0 on the y axis instead of at their real value (it oversmoothes the curves)
hoverinfo = 'text',  # Display y-value and additional text on hover
text = ~paste(Gene, "<br>Count:", Counts),
showlegend = FALSE
) |>
layout(
title = "Distribution of Read Counts per Gene and Sample",
yaxis = list(title = "Raw Counts", range = c(0, NA))
)
plot_violin_raw_counts
plot_ly(
data = raw_nonnorm_counts_long,
x = ~Sample,
y = ~Counts,
type = 'violin',
color = ~Sample,
box = list(visible = TRUE),  # optional boxplot inside the violin plot
meanline = list(visible = TRUE),  # optional line for the mean
#points = "all",  # Show all data points
#jitter = 0.3,  # if showing all data points, add some jitter to points for better visibility
bandwidth = 125, #...or else KDE is calculated in a way that makes values around 300 counts plot on 0 on the y axis instead of at their real value (it oversmoothes the curves)
hoverinfo = 'text',  # Display y-value and additional text on hover
text = ~paste(Gene, "<br>Count:", Counts),
showlegend = FALSE
) |>
layout(
title = "Distribution of Read Counts per Gene and Sample",
yaxis = list(title = "Raw Counts",
tickvals = seq(0, max(raw_nonnorm_counts_long$Counts), by = 100),  # Adjust the tick positions
ticktext = seq(0, max(raw_nonnorm_counts_long$Counts), by = 100) - 300,  # Display shifted values
range = c(0, max(raw_nonnorm_counts_long$Counts)))  # Set range to match data)
)
plot_ly(
data = raw_nonnorm_counts_long,
x = ~Sample,
y = ~Counts,
type = 'violin',
color = ~Sample,
box = list(visible = TRUE),  # optional boxplot inside the violin plot
meanline = list(visible = TRUE),  # optional line for the mean
#points = "all",  # Show all data points
#jitter = 0.3,  # if showing all data points, add some jitter to points for better visibility
bandwidth = 125, #...or else KDE is calculated in a way that makes values around 300 counts plot on 0 on the y axis instead of at their real value (it oversmoothes the curves)
hoverinfo = 'text',  # Display y-value and additional text on hover
text = ~paste(Gene, "<br>Count:", Counts),
showlegend = FALSE
) |>
layout(
title = "Distribution of Read Counts per Gene and Sample",
yaxis = list(title = "Raw Counts",
tickvals = seq(0, max(raw_nonnorm_counts_long$Counts)),  # Adjust the tick positions
ticktext = seq(0, max(raw_nonnorm_counts_long$Counts)) - 300,
#,  # Display shifted values
range = c(0, max(raw_nonnorm_counts_long$Counts)))  # Set range to match data)
)
q
